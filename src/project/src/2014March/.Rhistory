dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
max(g.comFastGreedy$modularity)
max(g.comFastGreedy$membership)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.drl(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
g.comLouvain$membership
hist(g.comLouvain)
hist(g.comLouvain$membership)
hist(g.comLouvain$membership, plots=FALSE)
hist(g.comLouvain$membership, plot=FALSE)
hist(g.comLouvain$membership, breaks=1)
hist(g.comLouvain$membership, breaks=28)
vcount(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
membership = g.comLouvain$membership
?which
numberOfCommunities <- max(g.comLouvain$membership)
for(i in 1:numberOfCommunities){
print(which(membership==i))
}
for(i in 1:numberOfCommunities){
print(length(which(membership==i)))
}
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
vcount(g)
length(E(g))
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
# get the vertices names of nodes belonging to each community
membershipLouvain = g.comLouvain$membership
members = c()
for(i in 1:max(membershipLouvain)){
memberIndices = which(membershipLouvain == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="louvainVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
membershipFastunfolding = g.comFastUnfolding$membership
members = c()
for(i in 1:max(membershipFastunfolding)){
memberIndices = which(membershipFastunfolding == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="fastUnfoldingVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
# png('greedy_community_1000_restaurants_only', width=3000, height=2000)
# V(g)$color <- g.comFastGreedy$membership + 1
# layout <- layout.mds(g)
# plot(g, vertex.label=NA, vertex.size=1, layout=layout)
#
# dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
# get the vertices names of nodes belonging to each community
membershipLouvain = g.comLouvain$membership
members = c()
for(i in 1:max(membershipLouvain)){
memberIndices = which(membershipLouvain == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="louvainVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
membershipFastunfolding = g.comFastUnfolding$membership
members = c()
for(i in 1:max(membershipFastunfolding)){
memberIndices = which(membershipFastunfolding == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="fastUnfoldingVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
# png('greedy_community_1000_restaurants_only', width=3000, height=2000)
# V(g)$color <- g.comFastGreedy$membership + 1
# layout <- layout.mds(g)
# plot(g, vertex.label=NA, vertex.size=1, layout=layout)
#
# dev.off()
setwd("~/Abhinav/howba/app/src/project/src/2014March")
data <- load("normalisedMarch2014.RData")
head(normalisedMarch)
install.packages("feather")
install.packages("evtools")
install.packages("devtools")
devtools::install_github("wesm/feather/R")
library("feather")
