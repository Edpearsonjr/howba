layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
E(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
max(g.comFastGreedy$modularity)
max(g.comFastGreedy$membership)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.fruchterman.reingold(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.drl(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
g.comLouvain$membership
hist(g.comLouvain)
hist(g.comLouvain$membership)
hist(g.comLouvain$membership, plots=FALSE)
hist(g.comLouvain$membership, plot=FALSE)
hist(g.comLouvain$membership, breaks=1)
hist(g.comLouvain$membership, breaks=28)
vcount(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
membership = g.comLouvain$membership
?which
numberOfCommunities <- max(g.comLouvain$membership)
for(i in 1:numberOfCommunities){
print(which(membership==i))
}
for(i in 1:numberOfCommunities){
print(length(which(membership==i)))
}
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
vcount(g)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
vcount(g)
length(E(g))
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of ??the gast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
png('greedy_community_1000_restaurants_only', width=3000, height=2000)
V(g)$color <- g.comFastGreedy$membership + 1
layout <- layout.mds(g)
plot(g, vertex.label=NA, vertex.size=1, layout=layout)
dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
# get the vertices names of nodes belonging to each community
membershipLouvain = g.comLouvain$membership
members = c()
for(i in 1:max(membershipLouvain)){
memberIndices = which(membershipLouvain == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="louvainVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
membershipFastunfolding = g.comFastUnfolding$membership
members = c()
for(i in 1:max(membershipFastunfolding)){
memberIndices = which(membershipFastunfolding == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="fastUnfoldingVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
# png('greedy_community_1000_restaurants_only', width=3000, height=2000)
# V(g)$color <- g.comFastGreedy$membership + 1
# layout <- layout.mds(g)
# plot(g, vertex.label=NA, vertex.size=1, layout=layout)
#
# dev.off()
library("igraph")
# Before we run anaything just clean up all the environment vaiables
# saves you a ton of time
rm(list = ls())
implicitGraphFile <- "/Users/abhinav/Abhinav/sdma/project/twe/twe/data/gml/adacos_cuisine_implicit.gml"
g <- read.graph(implicitGraphFile, format = "gml")
g.comFastGreedy <- fastgreedy.community(g, weights=E(g)$weight)
g.comFastUnfolding <- multilevel.community(g)
g.comLouvain <- cluster_louvain(g)
paste(c("The number of communities in the fast unfolding of communities", max(g.comFastUnfolding$membership)))
paste(c("The number of communities in the louvain communities", max(g.comLouvain$membership)))
paste(c("The number of communities in the fast greedy community: ", max(g.comFastGreedy$membership)))
paste(c("max modularity of fast unfolding of communities: ", max(g.comFastUnfolding$modularity)))
paste(c("max modularity of louvain community", max(g.comLouvain$modularity)))
paste(c("max modulairty of Fast greedy community", max(g.comFastGreedy$modularity)))
# get the vertices names of nodes belonging to each community
membershipLouvain = g.comLouvain$membership
members = c()
for(i in 1:max(membershipLouvain)){
memberIndices = which(membershipLouvain == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="louvainVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
membershipFastunfolding = g.comFastUnfolding$membership
members = c()
for(i in 1:max(membershipFastunfolding)){
memberIndices = which(membershipFastunfolding == i)
names = get.vertex.attribute(g, "name", index=memberIndices)
write(names, file="fastUnfoldingVertices.txt", append = TRUE, sep = ",", ncolumns = length(names))
}
# png('greedy_community_1000_restaurants_only', width=3000, height=2000)
# V(g)$color <- g.comFastGreedy$membership + 1
# layout <- layout.mds(g)
# plot(g, vertex.label=NA, vertex.size=1, layout=layout)
#
# dev.off()
install.packages("RMySQL")
install.packages("rgeos")
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
isntall.packages("geojsonio")
install.packages("geojsonio")
library('geojsonio')
setwd("~/Abhinav/howba/app/src/project/src/2013Dec")
library('data.table')               # For handling large files
library('dplyr')                    # Operations on frames
library('RMySQL')                   # For connecting with the mysql package
library('lubridate')                # For manipulating the dates in R
source('../utils.R')                # we can use the functions in utils now
rm(list=ls())
DB_HOST = 'localhost'
DB_PORT = '3306'
DB_USER = 'root'
DB_PASSWORD = '#Ab1992#'
DB_NAME = 'howba'
################################################################################
# Connecting to the database
################################################################################
print("Connecting to the database")
connection <- dbConnect(RMySQL::MySQL(), user=DB_USER, password=DB_PASSWORD, host=DB_HOST, dbname=DB_NAME)
################################################################################
# Getting the November 24th 2013 data
################################################################################
queryNovemberSunday <-"SELECT * FROM NOV2013 WHERE DATE(pickup_time)='2013-11-24'"
data <- tbl_df(dbGetQuery(connection, queryNovemberSunday))
cleanData <- data %>%
mutate(pickup_time=ymd_hms(pickup_time)) %>%     # Converting into lubridate date
mutate(dropoff_time=ymd_hms(dropoff_time)) %>%   # Converting the drop of time into lubridate
filter(pickup_latitude > 0, pickup_longitude < 0) %>%
filter(dropoff_latitude > 0,dropoff_longitude < 0)
isInsideDerailmentArea <- function(x){
splitString <- strsplit(x,",")[[1]]
lat <- as.numeric(splitString[1])
long <- as.numeric(splitString[2])
print(paste("long", long))
print(paste("lat", lat))
isInside <- isInsidePolygon(lat, long, bounding_box_derailment_x_coordinates, bounding_box_derailment_y_coorindates)
isInside
}
aroundTheDerailmentPickup <- cleanData %>%
mutate(pickup_geom =paste(pickup_latitude, pickup_longitude, sep=",")) %>%
mutate(isInside= isInsideDerailmentArea(pickup_geom))
source('../utils.R')                # we can use the functions in utils now
